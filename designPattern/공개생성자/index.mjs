import { ImmutableBuffer } from './immutableBiffer.mjs';

const hello = 'Hello!';
const immutable = new ImmutableBuffer(hello.length, ({ write }) => {
  write(hello);
});
console.log(immutable);
/* 버퍼를 변경하지 않는 함수들은 공개하지만, 버퍼의 내용을 변경하는 함수들은 노출하지 않습니다.
ImmutableBuffer {
  readBigUInt64LE: [Function: bound readBigUInt64LE],
  readBigUInt64BE: [Function: bound readBigUInt64BE],
  readBigUint64LE: [Function: bound readBigUInt64LE],
  readBigUint64BE: [Function: bound readBigUInt64BE],
  readBigInt64LE: [Function: bound readBigInt64LE],
  readBigInt64BE: [Function: bound readBigInt64BE],
  readUIntLE: [Function: bound readUIntLE],
  readUInt32LE: [Function: bound readUInt32LE],
  readUInt16LE: [Function: bound readUInt16LE],
  readUInt8: [Function: bound readUInt8],
  readUIntBE: [Function: bound readUIntBE],
  readUInt32BE: [Function: bound readUInt32BE],
  readUInt16BE: [Function: bound readUInt16BE],
  readUintLE: [Function: bound readUIntLE],
  readUint32LE: [Function: bound readUInt32LE],
  readUint16LE: [Function: bound readUInt16LE],
  readUint8: [Function: bound readUInt8],
  readUintBE: [Function: bound readUIntBE],
  readUint32BE: [Function: bound readUInt32BE],
  readUint16BE: [Function: bound readUInt16BE],
  readIntLE: [Function: bound readIntLE],
  readInt32LE: [Function: bound readInt32LE],
  readInt16LE: [Function: bound readInt16LE],
  readInt8: [Function: bound readInt8],
  readIntBE: [Function: bound readIntBE],
  readInt32BE: [Function: bound readInt32BE],
  readInt16BE: [Function: bound readInt16BE],
  readFloatLE: [Function: bound readFloatForwards],
  readFloatBE: [Function: bound readFloatBackwards],
  readDoubleLE: [Function: bound readDoubleForwards],
  readDoubleBE: [Function: bound readDoubleBackwards],
  asciiSlice: [Function: bound asciiSlice],
  base64Slice: [Function: bound base64Slice],
  base64urlSlice: [Function: bound base64urlSlice],
  latin1Slice: [Function: bound latin1Slice],
  hexSlice: [Function: bound hexSlice],
  ucs2Slice: [Function: bound ucs2Slice],
  utf8Slice: [Function: bound utf8Slice],
  asciiWrite: [Function: bound asciiWrite],
  base64Write: [Function: bound base64Write],
  base64urlWrite: [Function: bound base64urlWrite],
  latin1Write: [Function: bound latin1Write],
  hexWrite: [Function: bound hexWrite],
  ucs2Write: [Function: bound ucs2Write],
  utf8Write: [Function: bound utf8Write],
  copy: [Function: bound copy],
  toString: [Function: bound toString],
  equals: [Function: bound equals],
  inspect: [Function: bound inspect],
  compare: [Function: bound compare],
  indexOf: [Function: bound indexOf],
  lastIndexOf: [Function: bound lastIndexOf],
  includes: [Function: bound includes],
  toJSON: [Function: bound toJSON],
  slice: [Function: bound slice],
  toLocaleString: [Function: bound toString]
} */
